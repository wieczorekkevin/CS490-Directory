"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const spectral_core_1 = require("@stoplight/spectral-core");
const parseUrlVariables_1 = require("./utils/parseUrlVariables");
const getMissingProps_1 = require("../../utils/getMissingProps");
const getRedundantProps_1 = require("../../utils/getRedundantProps");
const applyUrlVariables_1 = require("./utils/applyUrlVariables");
exports.default = (0, spectral_core_1.createRulesetFunction)({
    input: {
        errorMessage: 'Invalid Server Object',
        type: 'object',
        properties: {
            url: {
                type: 'string',
            },
            variables: {
                type: 'object',
                additionalProperties: {
                    type: 'object',
                    properties: {
                        enum: {
                            type: 'array',
                            items: {
                                type: 'string',
                            },
                        },
                        default: {
                            type: 'string',
                        },
                        description: {
                            type: 'string',
                        },
                        examples: {
                            type: 'string',
                        },
                    },
                    patternProperties: {
                        '^x-': true,
                    },
                    additionalProperties: false,
                },
            },
        },
        required: ['url'],
    },
    errorOnInvalidInput: true,
    options: {
        type: ['object', 'null'],
        properties: {
            checkSubstitutions: {
                type: 'boolean',
                default: 'false',
            },
        },
        additionalProperties: false,
    },
}, function serverVariables({ url, variables }, opts, ctx) {
    var _a;
    if (variables === void 0)
        return;
    const results = [];
    const foundVariables = (0, parseUrlVariables_1.parseUrlVariables)(url);
    const definedVariablesKeys = Object.keys(variables);
    const redundantVariables = (0, getRedundantProps_1.getRedundantProps)(foundVariables, definedVariablesKeys);
    for (const variable of redundantVariables) {
        results.push({
            message: `Server's "variables" object has unused defined "${variable}" url variable.`,
            path: [...ctx.path, 'variables', variable],
        });
    }
    if (foundVariables.length === 0)
        return results;
    const missingVariables = (0, getMissingProps_1.getMissingProps)(foundVariables, definedVariablesKeys);
    if (missingVariables.length > 0) {
        results.push({
            message: `Not all server's variables are described with "variables" object. Missed: ${missingVariables.join(', ')}.`,
            path: [...ctx.path, 'variables'],
        });
    }
    const variablePairs = [];
    for (const key of definedVariablesKeys) {
        if (redundantVariables.includes(key))
            continue;
        const values = variables[key];
        if ('enum' in values) {
            variablePairs.push([key, values.enum]);
            if ('default' in values && !values.enum.includes(values.default)) {
                results.push({
                    message: `Server Variable "${key}" has a default not listed in the enum`,
                    path: [...ctx.path, 'variables', key, 'default'],
                });
            }
        }
        else {
            variablePairs.push([key, [(_a = values.default) !== null && _a !== void 0 ? _a : '']]);
        }
    }
    if ((opts === null || opts === void 0 ? void 0 : opts.checkSubstitutions) === true && variablePairs.length > 0) {
        checkSubstitutions(results, ctx.path, url, variablePairs);
    }
    return results;
});
function checkSubstitutions(results, path, url, variables) {
    const invalidUrls = [];
    for (const substitutedUrl of (0, applyUrlVariables_1.applyUrlVariables)(url, variables)) {
        try {
            new URL(substitutedUrl);
        }
        catch {
            invalidUrls.push(substitutedUrl);
            if (invalidUrls.length === 5) {
                break;
            }
        }
    }
    if (invalidUrls.length === 5) {
        results.push({
            message: `At least 5 substitutions of server variables resulted in invalid URLs: ${invalidUrls.join(', ')} and more`,
            path: [...path, 'variables'],
        });
    }
    else if (invalidUrls.length > 0) {
        results.push({
            message: `A few substitutions of server variables resulted in invalid URLs: ${invalidUrls.join(', ')}`,
            path: [...path, 'variables'],
        });
    }
}
//# sourceMappingURL=index.js.map
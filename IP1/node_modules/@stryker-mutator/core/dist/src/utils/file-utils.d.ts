export declare const fileUtils: {
    deleteDir: ((path: string | string[], opt?: import("rimraf").RimrafAsyncOptions | undefined) => Promise<boolean>) & {
        rimraf: ((path: string | string[], opt?: import("rimraf").RimrafAsyncOptions | undefined) => Promise<boolean>) & {
            sync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        };
        sync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        rimrafSync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        manual: ((path: string | string[], opt?: import("rimraf").RimrafAsyncOptions | undefined) => Promise<boolean>) & {
            sync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        };
        manualSync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        native: ((path: string | string[], opt?: import("rimraf").RimrafAsyncOptions | undefined) => Promise<boolean>) & {
            sync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        };
        nativeSync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        posix: ((path: string | string[], opt?: import("rimraf").RimrafAsyncOptions | undefined) => Promise<boolean>) & {
            sync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        };
        posixSync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        windows: ((path: string | string[], opt?: import("rimraf").RimrafAsyncOptions | undefined) => Promise<boolean>) & {
            sync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        };
        windowsSync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        moveRemove: ((path: string | string[], opt?: import("rimraf").RimrafAsyncOptions | undefined) => Promise<boolean>) & {
            sync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
        };
        moveRemoveSync: (path: string | string[], opt?: import("rimraf").RimrafSyncOptions | undefined) => boolean;
    };
    cleanFolder(folderName: string): Promise<string | undefined>;
    exists(fileName: string): Promise<boolean>;
    /**
     * Wrapper around the 'import' expression (for testability)
     */
    importModule(moduleName: string): Promise<unknown>;
    /**
     * Recursively walks the from directory and copy the content to the target directory synchronously
     * @param from The source directory to move from
     * @param to The target directory to move to
     */
    moveDirectoryRecursiveSync(from: string, to: string): void;
    /**
     * Creates a symlink at `from` that points to `to`
     * @param to The thing you want to point to
     * @param from The thing you want to point from
     */
    symlinkJunction(to: string, from: string): Promise<void>;
    /**
     * Looks for the node_modules folder from basePath up to root.
     * returns the first occurrence of the node_modules, or null of none could be found.
     * @param basePath starting point
     */
    findNodeModulesList(basePath: string, tempDirName?: string): Promise<string[]>;
};
//# sourceMappingURL=file-utils.d.ts.map